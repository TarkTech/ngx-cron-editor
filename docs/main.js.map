{"version":3,"file":"main.js","mappings":"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","sources":["./demo/src/app/app.component.ts","./demo/src/app/app.component.html","./demo/src/app/app.module.ts","./demo/src/environments/environment.ts","./demo/src/main.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { CronOptions } from 'cron-editor';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  public cronValue = '0 0 1/1 * *';\n\n  public cronOptions: CronOptions = {\n    hideMinutesTab: false,\n    hideHourlyTab: false,\n    hideDailyTab: false,\n    hideWeeklyTab: false,\n    hideMonthlyTab: false,\n    hideYearlyTab: false,\n    hideAdvancedTab: false,\n    hideSpecificWeekDayTab: false,\n    hideSpecificMonthWeekTab: false,\n\n    use24HourTime: true,\n    hideSeconds: false,\n\n    cronFlavor: 'standard'\n  };\n\n  cronFlavorFC: FormControl;\n\n  languageFC: FormControl;\n\n  availableLanguages = ['en', 'it'];\n\n  constructor(private translate: TranslateService) {}\n\n  ngOnInit(): void {\n    this.translate.addLangs(this.availableLanguages);\n    this.translate.setDefaultLang('en');\n    this.cronFlavorFC = new FormControl(this.cronOptions.cronFlavor);\n    this.languageFC = new FormControl(this.translate.getDefaultLang());\n  }\n\n  seeCron(ev: string): void {\n    this.cronValue = ev;\n  }\n\n  cronFlavorChange(event: any): void {\n    this.cronOptions.cronFlavor = event.value;\n  }\n\n  changeLanguage(event: any): void {\n    this.translate.use(event.value);\n  }\n}\n","<section class=\"mat-typography demo-container\">\n\n  <h1>Angular Cron Expression Editor</h1>\n\n    <mat-card class=\"demo-card\">\n      <mat-card-header class=\"demo-card-header\">\n\n        <mat-card-title>\n          {{ 'cronEditor.lbl.selectCronFlavor' | translate }}\n        </mat-card-title>\n        <div>\n\n          <!-- FLAVOR -->\n          <mat-form-field>\n            <mat-label>{{ 'cronEditor.lbl.flavor' | translate }}</mat-label>\n            <mat-select (selectionChange)=\"cronFlavorChange($event)\" [formControl]=\"cronFlavorFC\">\n              <mat-option *ngFor=\"let flavor of ['quartz', 'standard']\" [value]=\"flavor\">\n                {{ flavor }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n\n          <!-- LANGUAGE -->\n          <mat-form-field>\n            <mat-label>{{ 'cronEditor.lbl.language' | translate }}</mat-label>\n            <mat-select (selectionChange)=\"changeLanguage($event)\" [formControl]=\"languageFC\">\n              <mat-option *ngFor=\"let language of availableLanguages\" [value]=\"language\">\n                {{ language }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n\n        </div>\n      </mat-card-header>\n\n      <!-- TODO my cron editor here after the publishing on npm -->\n      <app-cron-editor\n        [options]=\"cronOptions\"\n        [cronStartingValue]=\"cronValue\"\n        (cronChange)=\"seeCron($event)\">\n      </app-cron-editor>\n\n      <mat-card-footer class=\"demo-card-footer\">\n        <div>\n          <h3>\n            <b>Expression: {{ cronValue }}</b>\n          </h3>\n        </div>\n      </mat-card-footer>\n\n    </mat-card>\n</section>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatCardModule } from '@angular/material/card';\nimport { MAT_FORM_FIELD_DEFAULT_OPTIONS } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { AppComponent } from './app.component';\nimport { CronEditorModule } from 'cron-editor';\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nexport function createTranslateLoader(http: HttpClient): TranslateHttpLoader {\n  return new TranslateHttpLoader(http, 'assets/i18n/', '.json');\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    BrowserModule,\n    BrowserAnimationsModule,\n    MatCardModule,\n    MatSelectModule,\n    MatSliderModule,\n    ReactiveFormsModule,\n    CronEditorModule,\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: createTranslateLoader,\n        deps: [HttpClient]\n      }\n    }),\n    HttpClientModule\n  ],\n  declarations: [AppComponent],\n  bootstrap: [AppComponent],\n  providers: [\n    {\n      provide: MAT_FORM_FIELD_DEFAULT_OPTIONS,\n      useValue: { appearance: 'outline' }\n    }\n  ]\n})\nexport class AppModule {}\n","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n"],"names":[],"sourceRoot":"webpack:///"}